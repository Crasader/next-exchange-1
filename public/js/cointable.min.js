!function (e, t) {
    var r = (e.isDefined, e.isObject), n = (e.isNumber, e.isUndefined, e.isArray), i = (e.isFunction, e.isString),
        a = e.element, o = e.noop, l = (e.fromJson, e.copy, e.merge);
    e.isDate, e.module("CoinTable", ["CoinTableData"]).run(["$rootScope", "RATES", function (e, r) {
        e.toggleSidebar = function () {
            a("#sidebar").sidebar("toggle")
        }, e.openDonationModal = function () {
            a("#donation-modal").modal("show")
        }, e.copyBTCAddress = function (e) {
            document.querySelector("#" + e).select(), document.execCommand("copy")
        }, t.base = "EUR", t.rates = r
    }]).factory("GenericList", ["$filter", function (e) {
        var t = function () {
            this.list = [], this.groups = {size: 50, begin: 0}
        };
        return ["push", "indexOf", "splice", "some", "map"].forEach(function (e) {
            t.prototype[e] = function () {
                return Array.prototype[e].apply(this.list, arguments)
            }
        }), t.prototype.clear = function () {
            this.list = [], this.groups.begin = 0
        }, t.prototype.first = function () {
            return this.list[0]
        }, t.prototype.last = function () {
            return this.list[this.list.length - 1]
        }, t.prototype.length = function () {
            return this.list.length
        }, t.prototype.setList = function (e) {
            return !!n(e) && (this.list = e, !0)
        }, t.prototype.get = function (e) {
            return this.list[e]
        }, t.prototype.each = function (e) {
            this.list.forEach(e)
        }, t.prototype.setGroupSize = function (e) {
            e != this.groups.size && (this.groups.begin = 0, this.groups.size = e)
        }, t.prototype.setGroup = function (e) {
            if (!this.isCurrentGroup(e)) {
                var t = this.groups, r = e * t.size;
                this.groups.begin = r >= this.length() ? 0 : r
            }
        }, t.prototype.nextGroup = function () {
            var e = this.currentGroup() + 1, t = this.countGroups();
            this.setGroup(e % t)
        }, t.prototype.previousGroup = function () {
            var e = this.currentGroup() - 1, t = this.countGroups();
            e >= 0 ? this.setGroup(e) : this.setGroup(t - 1)
        }, t.prototype.countGroups = function () {
            var e = this.length(), t = this.groups;
            return 0 == e ? 0 : Math.ceil(e / t.size)
        }, t.prototype.arrayGroups = function () {
            for (var e = this.countGroups(), t = [], r = 0; r < e; r++)t.push(r);
            return t
        }, t.prototype.currentGroup = function () {
            return Math.floor(this.groups.begin / this.groups.size)
        }, t.prototype.isCurrentGroup = function (e) {
            return this.currentGroup() == e
        }, t.prototype.getGroup = function () {
            var t = this.groups;
            return e("limitTo")(this.list, t.size, t.begin)
        }, t.prototype.isGroupSize = function (e) {
            return this.groups.size == e
        }, t
    }]).factory("CoinConverter", ["$filter", "RATES", function (e, r) {
        var n = function () {
            var t = Object.keys(r);
            this.currencies = e("orderBy")(t)
        };
        return n.prototype.convert = function (e, r, n, i, a) {
            return n = parseFloat(n), isNaN(n) ? null : i ? this.priceFormat(t(n).from(e).to(r), a || 5) : t(n).from(e).to(r) || null
        }, n.prototype.priceFormat = function (e, t) {
            var r = null;
            if (e = Number(e), !isNaN(e)) {
                var n = Math.abs(e), i = Math.pow(10, t - 1);
                if (0 == n) r = (0).toFixed(t - 1); else if (n >= i) r = e.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ","); else if (n < 1) {
                    for (var a, o = n,
                             l = ""; ;)if (o *= 10, 0 == (a = Math.floor(o))) l = l.concat("0"); else if (a >= i)break;
                    r = "0.".concat(l, o.toFixed(0))
                } else {
                    var s = e.toPrecision(t), c = s.split(".");
                    c[0] = c[0].replace(/\B(?=(\d{3})+(?!\d))/g, ","), r = c[0].concat(".", c[1])
                }
            }
            return r
        }, n.prototype.setFrom = function (e) {
            l(t.settings, {from: e})
        }, n.prototype.setTo = function (e) {
            l(t.settings, {to: e})
        }, n.prototype.hasCurrency = function (e) {
            return this.currencies.indexOf(e) != -1
        }, n
    }]).factory("CoinTable", ["GenericList", "$filter", "CoinConverter", "CMC", function (e, t, a, o) {
        var l = [{
                name: "name",
                contentText: "Name",
                align: "left",
                field: "name",
                template: "labeled_name"
            }, {
                name: "price",
                contentText: "Price",
                align: "right",
                field: "price_usd",
                template: "simple_price"
            }, {
                name: "market_cap",
                contentText: "Market Cap",
                align: "right",
                field: "market_cap_usd",
                template: "simple_price"
            }, {
                name: "available_supply",
                contentText: "Available Supply",
                align: "right",
                field: "available_supply",
                template: "available_supply"
            }, {
                name: "volume_24h",
                contentText: "Volume 24h",
                align: "right",
                field: "24h_volume_usd",
                template: "simple_price"
            }, {
                name: "change_1h",
                contentText: "% 1h",
                align: "center",
                field: "percent_change_1h",
                template: "changes"
            }, {
                name: "change_24h",
                contentText: "% 24h",
                align: "center",
                field: "percent_change_24h",
                template: "changes"
            }, {name: "change_7d", contentText: "% 7d", align: "center", field: "percent_change_7d", template: "changes"}],
            s = function (t, r) {
                e.call(this), this.setList(), this.order = {
                    field: t || "",
                    desc: !0
                }, this.converter = new a, this.market = null, this.ids = null, this.setCurrency("USD"), this.setGroupSize(r || 25), this.setTop(100)
            };
        return s.prototype = new e, s.prototype.setCurrency = function (e) {
            i(e) && this.currency != e && this.converter.hasCurrency(e) && (this.currency = e)
        }, s.prototype.setTop = function (e) {
            e != this.top && (this.top = e)
        }, s.prototype.isTop = function (e) {
            return this.top == e
        }, s.prototype.orderBy = function (e) {
            i(e) && (this.isOrderedBy(e) ? this.order.desc = !this.order.desc : (this.order.field = e, this.order.desc = !0))
        }, s.prototype.isOrderedBy = function (e) {
            return this.order.field == e
        }, s.prototype.isOrderedDesc = function () {
            return this.order.desc
        }, s.prototype.currentConversion = function (e, t) {
            return this.converter.convert("USD", this.currency, e, !0)
        }, s.prototype.showChange = function (e) {
            return e = parseFloat(e), isNaN(e) ? null : e.toFixed(2)
        }, s.prototype.updateResults = function () {
            var e = this, r = {}, i = n(e.ids) ? t("filter")(o, function (t) {
                return e.ids.indexOf(t.id) != -1
            }) : o;
            r[e.order.field] = null;
            var a = t("orderBy")(i, function (e) {
                    return parseInt(e.rank)
                }), l = t("limitTo")(a, "all" == e.top ? void 0 : e.top), s = t("filter")(l, r),
                c = t("filter")(l, function (t) {
                    if (null != t[e.order.field])return !0
                }), u = t("orderBy")(c, function (t) {
                    switch (e.order.field) {
                        case"name":
                        case"symbol":
                        case"id":
                            return t[e.order.field];
                        default:
                            var r = parseFloat(t[e.order.field]);
                            return isNaN(r) ? 0 : r
                    }
                }, e.order.desc);
            u = e.order.desc ? u.concat(s) : s.concat(u), e.setList(u), e.setGroup(0)
        }, s.prototype.setColumns = function (e) {
            var n = this;
            if (i(e) && e.length) {
                e = e.replace(/ /g, "");
                var a = e.split(","), o = [];
                a.forEach(function (e) {
                    var n = t("filter")(l, {name: e})[0];
                    r(n) && o.push(n)
                }), n.columns = o
            } else n.columns = l
        }, s.prototype.isColumn = function (e, t) {
            return r(e) && e.name == t
        }, s.prototype.inColumns = function (e, t) {
            return r(e) && n(t) && t.indexOf(e.name) != -1
        }, s.prototype.getMarketById = function (e) {
            return t("filter")(o, {id: e})[0]
        }, s.prototype.getColumnByName = function (e) {
            var t = null;
            return this.columns.some(function (r) {
                if (r.name == e)return t = r, !0
            }), t
        }, s.prototype.getAllMarkets = function () {
            return o
        }, s.prototype.setIdsFilter = function (e) {
            n(e) && e.length > 0 ? this.ids = e : this.ids = null
        }, s.prototype.isIdsFiltered = function () {
            return n(this.ids)
        }, s
    }]).directive("coinTable", ["$compile", "$timeout", "THEME", function (e, t, n) {
        var i = swriter.Segment().addChild(swriter.Form().addChild(swriter.Fields().pushField({class: "thirteen wide"}, swriter.Dropdown(!1, {id: "ct-drop-search"}).multiple().search().selection().pushNativeInput("hidden").pushIcon("dropdown").defineDefaultText("Search Currencies").addDropdownMenu(swriter.Item({"data-value": "{{ market.id }}"}, "{{ market.name }}").ngRepeat("market in table.getAllMarkets()"))).pushField({class: "three wide"}, swriter.Button(n.color).makeLabeledIcon("delete", "Clear").fluid().ngClick("clearIds()")))).addChild(swriter.Grid({id: "ct-menu-grid"}).vertically().padded().stackable().addColumn({class: "eleven wide"}, swriter.Form().addChild(swriter.Fields().inline().ngClass("{disabled: table.isIdsFiltered()}").defineLabel("Top:").addChildren([swriter.Field(swriter.Checkbox().makeRadio({
                value: "100",
                "ng-model": "table.top",
                "ng-checked": "true"
            }).defineLabel("100")), swriter.Field(swriter.Checkbox().makeRadio({
                value: "250",
                "ng-model": "table.top"
            }).defineLabel("250")), swriter.Field(swriter.Checkbox().makeRadio({
                value: "all",
                "ng-model": "table.top"
            }).defineLabel("All Coins"))])).addChild(swriter.Fields().inline().defineLabel("View:").addChildren([swriter.Field(swriter.Checkbox().makeRadio({
                value: "25",
                "ng-model": "table.groups.size",
                "ng-checked": "true"
            }).defineLabel("25")), swriter.Field(swriter.Checkbox().makeRadio({
                value: "50",
                "ng-model": "table.groups.size"
            }).defineLabel("50")), swriter.Field(swriter.Checkbox().makeRadio({
                value: "75",
                "ng-model": "table.groups.size"
            }).defineLabel("75")), swriter.Field(swriter.Checkbox().makeRadio({
                value: "100",
                "ng-model": "table.groups.size"
            }).defineLabel("100"))])).addChild(swriter.Fields().inline().defineLabel("Show In: ").pushField(swriter.Dropdown(!1, {id: "ct-drop-currency"}).search().selection().pushNativeInput("hidden").pushIcon("dropdown").defineDefaultText("USD").addDropdownMenu(swriter.Item({"data-value": "{{ cur }}"}, "{{ cur }}").ngRepeat("cur in table.converter.currencies")))).addChild(swriter.Fields().inline().defineLabel("Order: ").ngIf("isSmallScreen()").pushField(swriter.Dropdown(!0).ngModel("table.order.field").ngOptions("column.field as column.contentText for column in table.columns")).pushField(swriter.Button(n.color).makeIcon("{{ table.order.desc ? 'arrow down' : 'arrow up' }}").ngClick("table.order.desc = !table.order.desc")))).addColumn({class: "ct-arrows bottom aligned five wide"}, swriter.Menu(swriter.Div(!1).menu().secondary().right().pushItem(swriter.Button(n.color).makeIcon("chevron left").ngClick("table.previousGroup()")).pushItem("{{table.currentGroup()+1}}/{{table.countGroups()}}").pushItem(swriter.Button(n.color).makeIcon("chevron right").ngClick("table.nextGroup()"))).small().secondary())),
            o = swriter.Table().fluid().unstackable().basic().pushTableHead(swriter.TableRow(swriter.TableHeader().ngRepeat("column in table.columns").addClass("{{ column.align }} aligned").ngClick("table.orderBy(column.field)").pushHeader(4, [swriter.NativeSpan().ngIf("table.isOrderedBy(column.field)").addChildren([swriter.Icon("caret up").ngIf("!table.isOrderedDesc()"), swriter.Icon("caret down").ngIf("table.isOrderedDesc()")]), "{{ column.contentText }}"]))).pushTableBody(swriter.TableRow().addClass("ct-row").ngRepeat("market in table.getGroup()").ngClick("table.openMarketModal(market,$event)").addChild(swriter.TableCell().addAttrs({
                "coin-table-entry": "",
                template: "{{ column.template }}",
                fieldname: "{{ column.field }}"
            }).ngRepeat("column in table.columns"))).ngShow("!isSmallScreen()"),
            l = swriter.Accordion({id: "ct-small-view"}).fluid().styled().addChildren([swriter.Div(!1, [swriter.NativeDiv().addChildren([swriter.Icon("dropdown"), "{{ market.name }}&nbsp;&nbsp;&nbsp;", swriter.NativeSpan({
                class: "ct-price",
                "ng-style": "changeStyle(market.percent_change_1h)"
            }, "{{ table.currentConversion(market.price_usd) || '?' }} {{ table.currency }}")])]).title().ngRepeatStart("market in table.getGroup()"), swriter.Div(!1).content().ngRepeatEnd().addChildren([swriter.List().pushItem(swriter.Label().fluid().basic().addText("Price: ").defineDetail("{{ table.currentConversion(market.price_usd) || '?' }} {{ table.currency }}")).pushItem(swriter.Label().fluid().basic().addText("Volume 24h: ").defineDetail("{{ table.currentConversion(market['24h_volume_usd']) || '?' }} {{ table.currency }}")).pushItem(swriter.Label().fluid().basic().addText("Market Cap: ").defineDetail("{{ table.currentConversion(market.market_cap_usd) || '?' }} {{ table.currency }}")).pushItem(swriter.Label().fluid().basic().addText("Total Supply: ").defineDetail("{{ table.currentConversion(market.total_supply) || '?' }} {{ table.currency }}")).pushItem(swriter.Label().fluid().basic().addText("Available Supply: ").defineDetail("{{ table.currentConversion(market.available_supply) || '?' }} {{ market.symbol }}")).pushItem(swriter.Label(n.changes).fluid().addText("Change 1h: ").defineDetail("{{ table.showChange(market.percent_change_1h) || '?' }} %").ngClass("changeClass(market.percent_change_1h)")).pushItem(swriter.Label(n.changes).fluid().addText("Change 24h: ").defineDetail("{{ table.showChange(market.percent_change_24h) || '?' }} %").ngClass("changeClass(market.percent_change_24h)")).pushItem(swriter.Label(n.changes).fluid().addText("Change 7d: ").defineDetail("{{ table.showChange(market.percent_change_7d) || '?' }} %").ngClass("changeClass(market.percent_change_7d)"))])]).ngShow("isSmallScreen()"),
            s = i.getHTML() + o.getHTML() + l.getHTML();
        return {
            restrict: "C",
            scope: {columns: "=", orderby: "="},
            controller: ["$scope", "CoinTable", "$window", function (e, r, n) {
                function i() {
                    var r = l.width();
                    l.height();
                    r != e.win_width && t(function () {
                        e.win_width = r
                    })
                }

                function o(t, r) {
                    t != r && e.table.updateResults()
                }

                e.table = new r, e.clearIds = function () {
                    a("#ct-drop-search").dropdown("restore defaults")
                };
                var l = a(n);
                a(n.parent);
                e.win_width = l.width(), l.on("resize", i), e.$on("$destroy", function () {
                    l.off("resize", i)
                }), e.isSmallScreen = function () {
                    return e.win_width < 800
                }, e.changeIcon = function (e) {
                    return e > 0 ? "arrow up" : e < 0 ? "arrow down" : 0 == e ? "circle" : "help"
                }, e.changeStyle = function (e) {
                    return e > 0 ? {color: "#21BA45"} : e < 0 ? {color: "#DB2828"} : 0 == e ? {color: "#2185D0"} : {color: "#F2711C"}
                }, e.changeClass = function (e) {
                    return e > 0 ? "green" : e < 0 ? "red" : 0 == e ? "blue" : "grey"
                }, e.$watch("table.top", o, !0), e.$watch("table.order.field", o, !0), e.$watch("table.order.desc", o, !0), e.$watch("table.ids", o, !0)
            }],
            link: function (n, i, o) {
                n.table.setColumns(n.columns);
                var l = n.table.getColumnByName(n.orderby) || n.table.columns[0], c = r(l) ? l.field : "market_cap_usd";
                n.table.orderBy(c), n.table.updateResults(), i.html(s), e(i.contents())(n), a(function () {
                    a("#ct-drop-currency").dropdown({
                        onChange: function (e) {
                            t(function () {
                                n.table.setCurrency(e.toUpperCase())
                            })
                        }
                    }), a("#ct-drop-search").dropdown({
                        onChange: function (e) {
                            t(function () {
                                var t = e.toLowerCase().split(",");
                                t = t.indexOf("") != -1 ? [] : t, n.table.setIdsFilter(t)
                            })
                        }
                    }), a("#ct-small-view").accordion()
                })
            }
        }
    }]).directive("coinTableEntry", ["$compile", "THEME", function (e, t) {
        var r = function () {
            this.templates = {changes: {}, simple_price: {}, labeled_name: {}, available_supply: {}}
        };
        r.prototype.set = function (e, t, r) {
            this.templates[e] = r
        }, r.prototype.exists = function (e, t) {
            return i(this.templates[e][t])
        }, r.prototype.get = function (e, t) {
            return this.templates[e][t]
        };
        var n = new r, l = {
            changes: function (e) {
                if (!n.exists("changes", e)) {
                    var r = swriter.TableCell(swriter.Label(t.changes, [swriter.Icon("{{ changeIcon(market." + e + ") }}"), "{{ market." + e + " != null ? table.showChange(market." + e + ") : 'No Data' }}"]).small().fluid().ngClass("changeClass(market." + e + ")")).getHTML();
                    return n.set("changes", e, r), r
                }
                return n("changes", e)
            }, simple_price: function (e) {
                if (!n.exists("simple_price", e)) {
                    var t = swriter.TableCell([swriter.Label({class: "number-label"}).small().basic().addText("{{ table.currentConversion(market['" + e + "']) || '?' }}").defineDetail("{{ table.currency }}").fluid()]).right().aligned().getHTML();
                    return n.set("simple_price", e, t), t
                }
                return n("simple_price", e)
            }, labeled_name: function (e) {
                if (!n.exists("labeled_name", e)) {
                    var r = swriter.TableCell(swriter.Label(t.color).addText("{{ market.name }}").defineDetail("{{ market.symbol }}").small().fluid()).getHTML();
                    return n.set("labeled_name", e, r), r
                }
                return n("labeled_name", e)
            }, available_supply: function (e) {
                if (!n.exists("labeled_name", e)) {
                    var t = swriter.TableCell(swriter.Label({class: "number-label"}).addText("{{ table.converter.priceFormat(market.available_supply, 3) }}").defineDetail("{{ market.symbol }}").small().fluid().basic()).right().aligned().getHTML();
                    return n.set("available_supply", e, t), t
                }
                return n("available_supply", e)
            }
        };
        return {
            restrict: "A", link: function (t, r, n) {
                var i = l[n.template] || o, s = e(a(i(n.fieldname) || ""))(t);
                r.replaceWith(s)
            }
        }
    }])
}(angular, fx);